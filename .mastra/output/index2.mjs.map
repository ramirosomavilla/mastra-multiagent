{"version":3,"file":"index2.mjs","sources":["../../src/mastra/workflows/weather-workflow.ts","../../src/mastra/agents/weather-agent.ts","../../src/mastra/agents/info-agent.ts","../../src/mastra/tools/orchestrator-tool.ts","../../src/mastra/agents/orchestrator-agent.ts","../../src/mastra/tools/file-writer-tool.ts","../../src/mastra/agents/file-writer-agent.ts","../../src/mastra/index.ts"],"sourcesContent":["import { google } from '@ai-sdk/google';\nimport { Agent } from '@mastra/core/agent';\nimport { createStep, createWorkflow } from '@mastra/core/workflows';\nimport { z } from 'zod';\n\nconst llm = google('gemini-1.5-flash');\n\nconst agent = new Agent({\n  name: 'Weather Agent',\n  model: llm,\n  instructions: `\n        You are a local activities and travel expert who excels at weather-based planning. Analyze the weather data and provide practical activity recommendations.\n\n        For each day in the forecast, structure your response exactly as follows:\n\n        📅 [Day, Month Date, Year]\n        ═══════════════════════════\n\n        🌡️ WEATHER SUMMARY\n        • Conditions: [brief description]\n        • Temperature: [X°C/Y°F to A°C/B°F]\n        • Precipitation: [X% chance]\n\n        🌅 MORNING ACTIVITIES\n        Outdoor:\n        • [Activity Name] - [Brief description including specific location/route]\n          Best timing: [specific time range]\n          Note: [relevant weather consideration]\n\n        🌞 AFTERNOON ACTIVITIES\n        Outdoor:\n        • [Activity Name] - [Brief description including specific location/route]\n          Best timing: [specific time range]\n          Note: [relevant weather consideration]\n\n        🏠 INDOOR ALTERNATIVES\n        • [Activity Name] - [Brief description including specific venue]\n          Ideal for: [weather condition that would trigger this alternative]\n\n        ⚠️ SPECIAL CONSIDERATIONS\n        • [Any relevant weather warnings, UV index, wind conditions, etc.]\n\n        Guidelines:\n        - Suggest 2-3 time-specific outdoor activities per day\n        - Include 1-2 indoor backup options\n        - For precipitation >50%, lead with indoor activities\n        - All activities must be specific to the location\n        - Include specific venues, trails, or locations\n        - Consider activity intensity based on temperature\n        - Keep descriptions concise but informative\n\n        Maintain this exact formatting for consistency, using the emoji and section headers as shown.\n      `,\n});\n\nconst forecastSchema = z.object({\n  date: z.string(),\n  maxTemp: z.number(),\n  minTemp: z.number(),\n  precipitationChance: z.number(),\n  condition: z.string(),\n  location: z.string(),\n});\n\nfunction getWeatherCondition(code: number): string {\n  const conditions: Record<number, string> = {\n    0: 'Clear sky',\n    1: 'Mainly clear',\n    2: 'Partly cloudy',\n    3: 'Overcast',\n    45: 'Foggy',\n    48: 'Depositing rime fog',\n    51: 'Light drizzle',\n    53: 'Moderate drizzle',\n    55: 'Dense drizzle',\n    61: 'Slight rain',\n    63: 'Moderate rain',\n    65: 'Heavy rain',\n    71: 'Slight snow fall',\n    73: 'Moderate snow fall',\n    75: 'Heavy snow fall',\n    95: 'Thunderstorm',\n  };\n  return conditions[code] || 'Unknown';\n}\n\nconst fetchWeather = createStep({\n  id: 'fetch-weather',\n  description: 'Fetches weather forecast for a given city',\n  inputSchema: z.object({\n    city: z.string().describe('The city to get the weather for'),\n  }),\n  outputSchema: forecastSchema,\n  execute: async ({ inputData }) => {\n    if (!inputData) {\n      throw new Error('Input data not found');\n    }\n\n    const geocodingUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(inputData.city)}&count=1`;\n    const geocodingResponse = await fetch(geocodingUrl);\n    const geocodingData = (await geocodingResponse.json()) as {\n      results: { latitude: number; longitude: number; name: string }[];\n    };\n\n    if (!geocodingData.results?.[0]) {\n      throw new Error(`Location '${inputData.city}' not found`);\n    }\n\n    const { latitude, longitude, name } = geocodingData.results[0];\n\n    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=precipitation,weathercode&timezone=auto,&hourly=precipitation_probability,temperature_2m`;\n    const response = await fetch(weatherUrl);\n    const data = (await response.json()) as {\n      current: {\n        time: string;\n        precipitation: number;\n        weathercode: number;\n      };\n      hourly: {\n        precipitation_probability: number[];\n        temperature_2m: number[];\n      };\n    };\n\n    const forecast = {\n      date: new Date().toISOString(),\n      maxTemp: Math.max(...data.hourly.temperature_2m),\n      minTemp: Math.min(...data.hourly.temperature_2m),\n      condition: getWeatherCondition(data.current.weathercode),\n      precipitationChance: data.hourly.precipitation_probability.reduce(\n        (acc, curr) => Math.max(acc, curr),\n        0,\n      ),\n      location: name,\n    };\n\n    return forecast;\n  },\n});\n\nconst planActivities = createStep({\n  id: 'plan-activities',\n  description: 'Suggests activities based on weather conditions',\n  inputSchema: forecastSchema,\n  outputSchema: z.object({\n    activities: z.string(),\n  }),\n  execute: async ({ inputData }) => {\n    const forecast = inputData;\n\n    if (!forecast) {\n      throw new Error('Forecast data not found');\n    }\n\n    const prompt = `Based on the following weather forecast for ${forecast.location}, suggest appropriate activities:\n      ${JSON.stringify(forecast, null, 2)}\n      `;\n\n    const response = await agent.stream([\n      {\n        role: 'user',\n        content: prompt,\n      },\n    ]);\n\n    let activitiesText = '';\n\n    for await (const chunk of response.textStream) {\n      process.stdout.write(chunk);\n      activitiesText += chunk;\n    }\n\n    return {\n      activities: activitiesText,\n    };\n  },\n});\n\nconst weatherWorkflow = createWorkflow({\n  id: 'weather-workflow',\n  inputSchema: z.object({\n    city: z.string().describe('The city to get the weather for'),\n  }),\n  outputSchema: z.object({\n    activities: z.string(),\n  }),\n})\n  .then(fetchWeather)\n  .then(planActivities);\n\nweatherWorkflow.commit();\n\nexport { weatherWorkflow };\n","import { google } from '@ai-sdk/google';\nimport { Agent } from '@mastra/core/agent';\nimport { Memory } from '@mastra/memory';\nimport { LibSQLStore } from '@mastra/libsql';\nimport { weatherTool } from '@/mastra/tools/weather-tool';\n\nexport const weatherAgent = new Agent({\n  name: 'Weather Agent',\n  instructions: `\n      You are a helpful weather assistant that provides accurate weather information.\n\n      Your primary function is to help users get weather details for specific locations. When responding:\n      - Always ask for a location if none is provided\n      - If the location name isn’t in English, please translate it\n      - If giving a location with multiple parts (e.g. \"New York, NY\"), use the most relevant part (e.g. \"New York\")\n      - Include relevant details like humidity, wind conditions, and precipitation\n      - Keep responses concise but informative\n\n      Use the weatherTool to fetch current weather data.\n`,\n  model: google('gemini-1.5-flash'),\n  tools: { weatherTool },\n  memory: new Memory({\n    storage: new LibSQLStore({\n      url: 'file:../mastra.db', // path is relative to the .mastra/output directory\n    }),\n  }),\n});\n","import { Agent } from \"@mastra/core/agent\";\nimport { google } from \"@ai-sdk/google\";\n\nexport const infoAgent = new Agent({\n  name: 'Info Agent',\n  instructions: `\n    You are a helpful assistant that provides information about the user's request.\n  `,\n  model: google('gemini-1.5-flash'),\n\n});","import { createTool } from \"@mastra/core/tools\";\nimport { z } from \"zod\";\nimport { mastra } from \"@/mastra\";\nimport { Agent } from \"@mastra/core/agent\";\n\nexport const callWeatherAgent = createTool({\n  id: \"call-weather-agent\",\n  description: \"Call the weather agent\",\n  inputSchema: z.object({\n    city: z.string().describe('City name'),\n  }),\n  execute: async ({ context }) => {\n    const agent: Agent = mastra.getAgent('weatherAgent');\n    const result: any = await agent.generate([\n      {\n        role: 'user',\n        content: `What's the weather like in ${context.city}?`,\n      },\n    ]);\n    return { weather: result.text };\n  },\n});\n\nexport const callInfoAgent = createTool({\n  id: \"call-info-agent\",\n  description: \"Call the info agent\",\n  inputSchema: z.object({\n    city: z.string().describe('City name'),\n  }),\n  execute: async ({ context }) => {\n    const agent: Agent = mastra.getAgent('infoAgent');\n    const result: any = await agent.generate([\n      {\n        role: 'user',\n        content: `What's the weather like in ${context.city}?`,\n      },\n    ]);\n    return { info: result.text };\n  },\n});\n\nexport const callFileWriterAgent = createTool({\n  id: \"call-file-writer-agent\",\n  description: \"Call the file writer agent to write a file to the project root\",\n  inputSchema: z.object({\n    filename: z.string().describe('Filename'),\n    content: z.string().describe('Content'),\n  }),\n  execute: async ({ context }) => {\n    const agent: Agent = mastra.getAgent('fileWriterAgent');\n    const result: any = await agent.generate([\n      {\n        role: 'user',\n        content: `Write a file with the following content: ${context.content} and filename: ${context.filename}`,\n      },\n    ]);\n    return { success: true, filePath: result.text };\n  },\n});","import { Agent } from \"@mastra/core/agent\";\nimport { callWeatherAgent, callFileWriterAgent } from \"@/mastra/tools/orchestrator-tool\";\nimport { google } from \"@ai-sdk/google\";\nimport { callInfoAgent } from \"@/mastra/tools/orchestrator-tool\";\n\n\nexport const orchestratorAgent = new Agent({\n  name: \"orchestrator\",\n  description: \"Orchestrator agent\",\n  instructions: \"You are an orchestrator agent. You are responsible for calling the weather agent to get the weather for a given city.\",\n  model: google(\"gemini-1.5-flash\"),\n  tools: {\n    callWeatherAgent,\n    callInfoAgent,\n    callFileWriterAgent,\n  },\n});","import { createTool } from '@mastra/core/tools';\nimport { z } from 'zod';\nimport { promises as fs } from 'fs';\n\nexport const fileWriterTool = createTool({\n  id: 'file-writer',\n  description: 'Writes a .txt file with given filename and content to the project root.',\n  inputSchema: z.object({\n    filename: z.string().endsWith('.txt').describe('The name of the file to write (must end with .txt)'),\n    content: z.string().describe('The content to write into the file'),\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    filePath: z.string(),\n  }),\n  execute: async ({ context }) => {\n    const { filename, content } = context;\n    const filePath = `${process.cwd()}/${filename}`;\n    await fs.writeFile(filePath, content, 'utf8');\n    return { success: true, filePath };\n  },\n}); ","import { Agent } from '@mastra/core/agent';\nimport { fileWriterTool } from '@/mastra/tools/file-writer-tool';\nimport { google } from '@ai-sdk/google';\n\nexport const fileWriterAgent = new Agent({\n  name: 'File Writer Agent',\n  instructions: `\n    You are an agent that writes a .txt file with a given filename and content to the project root.\n    Use the fileWriterTool to perform the write operation.\n  `,\n  model: google('gemini-1.5-flash'),\n  tools: { fileWriterTool },\n}); ","import { Mastra } from '@mastra/core/mastra';\nimport { PinoLogger } from '@mastra/loggers';\nimport { LibSQLStore } from '@mastra/libsql';\nimport { weatherWorkflow } from './workflows/weather-workflow';\nimport { weatherAgent } from './agents/weather-agent';\nimport { infoAgent } from './agents/info-agent';\nimport { orchestratorAgent } from './agents/orchestrator-agent';\nimport { fileWriterAgent } from './agents/file-writer-agent';\n\nexport const mastra = new Mastra({\n  workflows: { weatherWorkflow },\n  agents: { weatherAgent, infoAgent, orchestratorAgent, fileWriterAgent },\n  storage: new LibSQLStore({\n    // stores telemetry, evals, ... into memory storage, if it needs to persist, change to file:../mastra.db\n    url: \":memory:\",\n  }),\n  logger: new PinoLogger({\n    name: 'Mastra',\n    level: 'info',\n  }),\n});\n"],"names":["fs"],"mappings":"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"}